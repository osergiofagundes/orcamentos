generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== TABELAS DE AUTENTICAÇÃO ====================
model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  resetToken    String?   // Token para reset de senha
  resetTokenExpiry DateTime? // Expiração do token de reset
  sessions      Session[]
  accounts      Account[]
  orcamentos    Orcamento[] // Relação adicionada
  usuariosAreas UsuarioAreaTrabalho[] // Relação adicionada
  convitesCriados ConviteWorkspace[] // Convites criados pelo usuário
  solicitacoesEnviadas SolicitacaoEntrada[] // Solicitações enviadas pelo usuário
  solicitacoesRespondidas SolicitacaoEntrada[] @relation("RespondeuSolicitacao") // Solicitações respondidas pelo usuário
  workspacesMovidosParaLixeira AreaTrabalho[] @relation("WorkspaceMovidoParaLixeira") // Workspaces movidos para lixeira por este usuário
  clientesExcluidos Cliente[] @relation("ClienteExcluido") // Clientes excluídos por este usuário
  orcamentosExcluidos Orcamento[] @relation("OrcamentoExcluido") // Orçamentos excluídos por este usuário
  produtosServicosExcluidos ProdutoServico[] @relation("ProdutoServicoExcluido") // Produtos/Serviços excluídos por este usuário
  categoriasExcluidas Categoria[] @relation("CategoriaExcluida") // Categorias excluídas por este usuário

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ==================== TABELAS DE ORÇAMENTOS ====================
enum StatusOrcamento {
  RASCUNHO
  ENVIADO
  APROVADO
  REJEITADO
  CANCELADO
}

enum TipoProdutoServico {
  PRODUTO
  SERVICO
}

enum TipoValor {
  UNIDADE
  METRO
  METRO_QUADRADO
  METRO_CUBICO
  CENTIMETRO
  DUZIA
  QUILO
  GRAMA
  QUILOMETRO
  LITRO
  MINUTO
  HORA
  DIA
  MES
  ANO
}

model AreaTrabalho {
  id                  Int            @id @default(autoincrement())
  nome                String         @db.VarChar(255)
  cpf_cnpj            String?
  telefone            String?
  email               String?
  endereco            String?
  bairro              String?
  cidade              String?
  estado              String?
  cep                 String?
  logo_url            String?        // URL do logotipo da empresa
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  inTrash             Boolean        @default(false) // Indica se está na lixeira
  trashedAt           DateTime?      // Data quando foi movido para lixeira
  trashedBy           String?        // ID do usuário que moveu para lixeira
  usuariosAreas       UsuarioAreaTrabalho[]
  clientes            Cliente[]
  produtosServicos    ProdutoServico[]
  categorias          Categoria[]
  orcamentos         Orcamento[]
  convites           ConviteWorkspace[] // Convites do workspace
  usuarioQueMoveuParaLixeira User?   @relation("WorkspaceMovidoParaLixeira", fields: [trashedBy], references: [id])

  @@map("area_trabalho")
}

model UsuarioAreaTrabalho {
  id                  Int            @id @default(autoincrement())
  usuario_id          String         // Alterado para String para relacionar com User.id
  area_trabalho_id    Int
  nivel_permissao     Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  usuario             User           @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  areaTrabalho        AreaTrabalho   @relation(fields: [area_trabalho_id], references: [id], onDelete: Cascade)

  @@unique([usuario_id, area_trabalho_id])
  @@map("usuario_area_trabalho")
}

model Cliente {
  id                  Int            @id @default(autoincrement())
  nome                String         @db.VarChar(255)
  cpf_cnpj            String?        @db.VarChar(255)
  telefone            String?        @db.VarChar(255)
  email               String?        @db.Text
  endereco            String?        @db.Text
  bairro              String?        @db.VarChar(255)
  cidade              String?        @db.VarChar(255)
  estado              String?        @db.VarChar(255)
  cep                 String?        @db.VarChar(255)
  area_trabalho_id    Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  deletedBy           String?        // ID do usuário que excluiu
  areaTrabalho        AreaTrabalho   @relation(fields: [area_trabalho_id], references: [id])
  orcamentos         Orcamento[]
  usuarioQueExcluiu   User?          @relation("ClienteExcluido", fields: [deletedBy], references: [id])

  @@map("cliente")
}

model Orcamento {
  id                  Int            @id @default(autoincrement())
  data_criacao        DateTime       @default(now())
  valor_total         Int?           // Em centavos (R$ 10,50 = 1050)
  status              StatusOrcamento @default(RASCUNHO)
  observacoes         String?        @db.Text
  cliente_id          Int?           // Tornando opcional para permitir exclusão do cliente
  usuario_id          String         // Alterado para String para relacionar com User.id
  area_trabalho_id    Int
  // Campos desnormalizados do cliente para preservar dados quando cliente for excluído
  cliente_nome        String         @db.VarChar(255)
  cliente_cpf_cnpj    String?        @db.VarChar(255)
  cliente_telefone    String?        @db.VarChar(255)
  cliente_email       String?        @db.Text
  cliente_endereco    String?        @db.Text
  cliente_bairro      String?        @db.VarChar(255)
  cliente_cidade      String?        @db.VarChar(255)
  cliente_estado      String?        @db.VarChar(255)
  cliente_cep         String?        @db.VarChar(255)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  deletedBy           String?        // ID do usuário que excluiu
  cliente             Cliente?       @relation(fields: [cliente_id], references: [id])
  usuario             User           @relation(fields: [usuario_id], references: [id])
  areaTrabalho        AreaTrabalho   @relation(fields: [area_trabalho_id], references: [id])
  itensOrcamento     ItemOrcamento[]
  usuarioQueExcluiu   User?          @relation("OrcamentoExcluido", fields: [deletedBy], references: [id])

  @@map("orcamento")
}

model ItemOrcamento {
  id                  Int            @id @default(autoincrement())
  orcamento_id        Int
  produto_servico_id  Int?           // Tornando opcional para permitir exclusão do produto
  quantidade          Int
  preco_unitario      Int            // Em centavos (R$ 10,50 = 1050)
  desconto_percentual Decimal?       @default(0) @db.Decimal(5,2) // Desconto em percentual (0.00 a 100.00)
  desconto_valor      Int?           @default(0) // Desconto em valor fixo em centavos
  // Campos desnormalizados do produto/serviço para preservar dados quando produto for excluído
  produto_nome        String         @db.VarChar(255)
  produto_tipo        TipoProdutoServico?
  produto_tipo_valor  TipoValor?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  orcamento           Orcamento      @relation(fields: [orcamento_id], references: [id])
  produtoServico      ProdutoServico? @relation(fields: [produto_servico_id], references: [id])

  @@map("item_orcamento")
}

model ProdutoServico {
  id                  Int            @id @default(autoincrement())
  nome                String         @db.VarChar(255)
  valor               Int?           // Em centavos (R$ 10,50 = 1050)
  tipo                TipoProdutoServico @default(PRODUTO)
  tipo_valor          TipoValor      @default(UNIDADE)
  categoria_id        Int?
  area_trabalho_id    Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  deletedBy           String?        // ID do usuário que excluiu
  categoria           Categoria?     @relation(fields: [categoria_id], references: [id])
  areaTrabalho        AreaTrabalho   @relation(fields: [area_trabalho_id], references: [id])
  itensOrcamento     ItemOrcamento[]
  usuarioQueExcluiu   User?          @relation("ProdutoServicoExcluido", fields: [deletedBy], references: [id])

  @@map("produto_servico")
}

model Categoria {
  id                  Int            @id @default(autoincrement())
  nome                String         @db.VarChar(255)
  area_trabalho_id    Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  deletedAt           DateTime?
  deletedBy           String?        // ID do usuário que excluiu
  areaTrabalho        AreaTrabalho   @relation(fields: [area_trabalho_id], references: [id])
  produtosServicos    ProdutoServico[]
  usuarioQueExcluiu   User?          @relation("CategoriaExcluida", fields: [deletedBy], references: [id])

  @@map("categoria")
}

// ==================== TABELAS DE CONVITES ====================
enum StatusConvite {
  ATIVO
  EXPIRADO
  USADO
}

enum StatusSolicitacao {
  PENDENTE
  APROVADO
  REJEITADO
}

model ConviteWorkspace {
  id                  Int            @id @default(autoincrement())
  codigo              String         @unique @db.VarChar(255)
  area_trabalho_id    Int
  criado_por          String         // ID do usuário que criou o convite
  nivel_permissao     Int            @default(1) // Nível de permissão padrão para novos usuários
  status              StatusConvite  @default(ATIVO)
  expira_em           DateTime       // Data de expiração do código
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  areaTrabalho        AreaTrabalho   @relation(fields: [area_trabalho_id], references: [id], onDelete: Cascade)
  criadoPor           User           @relation(fields: [criado_por], references: [id], onDelete: Cascade)
  solicitacoes        SolicitacaoEntrada[]

  @@map("convite_workspace")
}

model SolicitacaoEntrada {
  id                  Int            @id @default(autoincrement())
  convite_id          Int
  usuario_id          String         // ID do usuário que solicitou entrada
  status              StatusSolicitacao @default(PENDENTE)
  mensagem            String?        @db.Text // Mensagem opcional do usuário
  respondido_por      String?        // ID do admin que respondeu
  respondido_em       DateTime?      // Data da resposta
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  convite             ConviteWorkspace @relation(fields: [convite_id], references: [id], onDelete: Cascade)
  usuario             User           @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  respondidoPor       User?          @relation("RespondeuSolicitacao", fields: [respondido_por], references: [id])

  @@unique([convite_id, usuario_id]) // Um usuário não pode solicitar entrada no mesmo convite duas vezes
  @@map("solicitacao_entrada")
}